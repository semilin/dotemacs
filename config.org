#+TITLE:Emacs Config
* Basic Package Management
** Straight
   #+begin_src elisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

   #+end_src 

** Use-Package
   #+begin_src elisp
     (straight-use-package 'use-package)
   #+end_src
* Internal
** Manual Path Management
   #+begin_src elisp
     (setenv "PATH"
	     (concat
	      "/home/semi/go/bin" ":"
	      "/home/semi/.nimble/bin" ":"
	      (getenv "PATH")
	      )
	     )
   #+end_src
** Auto Save Directory
   #+begin_src elisp
     (setq auto-save-file-name-transforms
	   `((".*" "~/.config/emacs/saves/" t)))
   #+end_src

* Custom
** reload-config
   #+begin_src elisp
     (defun reload-config ()
       (interactive)
       (shell-command "quicktangle ~/.config/emacs/config.org ~/.config/emacs/config.el")
       (load-file "~/.config/emacs/config.el"))
   #+end_src
   
* Aesthetics
** Set Theme
   #+begin_src elisp
     (use-package doom-themes
       :straight t
       :config (load-theme 'doom-dracula t)
       )
   #+end_src
** Telephone line
   #+begin_src elisp
     (use-package telephone-line
       :straight t
       :hook (after-init . telephone-line-mode))
   #+end_src
** Dashboard
   #+begin_src elisp
     (use-package all-the-icons
       :straight t)
     (use-package dashboard
       :straight t
       :config
       (setq dashboard-banner-logo-title "Semimacs")
       (setq dashboard-center-content t)
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       (dashboard-setup-startup-hook))
   #+end_src

* Editing
** Aggressive Indent
   #+begin_src elisp
     (use-package aggressive-indent
       :straight t
       :hook (prog-mode . aggressive-indent-mode)
       )
   #+end_src
** Basic
   Highlight matching parentheses
   #+begin_src elisp
	 (show-paren-mode 1)
   #+end_src elisp

Relative line numbers
   #+begin_src elisp
     (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers 'relative)))
   #+end_src

** Electric Pairs
   #+begin_src elisp
     (electric-pair-mode)
   #+end_src
** Move Text
   #+begin_src elisp
     (use-package move-text
       :straight t
       :bind (("M-p" . move-text-up)
	      ("M-n" . move-text-down)))

   #+end_src
** Yasnippet
   #+begin_src elisp
     (use-package yasnippet
       :straight t
       :config (yas-global-mode 1))
   #+end_src
** QOL
   #+begin_src elisp
     (setq next-line-add-newlines t)
   #+end_src 
* Functionality
** Selectrum
   #+begin_src elisp
     (use-package vertico
       :straight t
       :config (vertico-mode 1))
   #+end_src
** Magit
   #+begin_src elisp
	       (use-package magit
		 :straight t
		 :defer t
		 :bind ("C-x g" . magit-status))
   #+end_src 
** Marginalia
   #+begin_src elisp
     (use-package marginalia
       :straight t
       :init
       (marginalia-mode))
   #+end_src
* Org
** Noter
   #+begin_src elisp
     (use-package org-noter
       :straight t)
   #+end_src
** Journal
   #+begin_src elisp
     (use-package org-journal
       :straight t
       :ensure t
       :defer t
       :config
       (setq org-journal-dir "~/org/journal"))
   #+end_src 
** Roam
   #+begin_src elisp
     (use-package org-roam
       :ensure t
       :straight t
       :init
       (setq org-roam-v2-ack t)
       :custom
       (org-roam-directory (file-truename "~/org/roam"))
       :config
       (org-roam-db-autosync-mode)
       (require 'org-roam-protocol))
   #+end_src 
** Roam-ui
   #+begin_src elisp
     (use-package org-roam-ui
       :straight
       (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
       :after org-roam
       :config
       (setq org-roam-ui-sync-theme t
	     org-roam-ui-follow t
	     org-roam-ui-update-on-save t
	     org-roam-ui-open-on-start t))
   #+end_src
** Superstar
   #+begin_src elisp
     (use-package org-superstar
       :straight t
       :hook (org-mode . org-superstar-mode))
   #+end_src
** Indentation
   #+begin_src elisp
     (setq org-adapt-indentation 't)
   #+end_src
* Programming
** Company
   #+begin_src elisp
     (use-package company
       :straight t
       :hook (prog-mode . company-mode)
       :config (setq company-idle-delay 0))
   #+end_src
** Language Modes
*** Go
    #+begin_src elisp
      (use-package go-mode
	:straight t
	:mode "\\.go\\'")
    #+end_src
*** Haskell
    #+begin_src elisp
      (use-package haskell-mode
	:straight t
	:mode "\\.hs\\'")
    #+end_src
*** Nim
    #+begin_src elisp
      (use-package nim-mode
	:straight t
	:mode "\\.nim\\'")
    #+end_src
    
*** Python
    #+begin_src elisp
      (use-package python
	:straight t
	:mode ("\\.py\\'" . python-mode))
    #+end_src
*** Rust
    #+begin_src elisp
      (use-package rust-mode
	:straight t
	:mode "\\.rs\\'")
    #+end_src
** LSP
   #+begin_src elisp
     (use-package lsp-mode
       :straight t
       :hook ((go-mode . lsp)
	      (rust-mode . lsp)
	      (nim-mode . lsp))
       :commands lsp)
   #+end_src

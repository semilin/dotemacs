#+TITLE:Emacs Config
* Basic Package Management
** Straight
   #+begin_src elisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

   #+end_src 

** Use-Package
   #+begin_src elisp
     (straight-use-package 'use-package)
   #+end_src
* Internal
** Manual Path Management
   #+begin_src elisp
     (setenv "PATH"
	     (concat
	      "/home/semi/go/bin" ":"
	      "/home/semi/.nimble/bin" ":"
	      (getenv "PATH")
	      )
	     )
   #+end_src
** Auto Save Directory
   #+begin_src elisp
     (setq backup-directory-alist '(("." . "~/.config/emacs/saves/")))
   #+end_src

* Custom
** reload-config
   #+begin_src elisp
     (defun reload-config ()
       (interactive)
       (load-file "~/.config/emacs/init.el"))
   #+end_src

* Aesthetics
** Set Theme
   #+begin_src elisp
     (use-package dracula-theme
       :straight t
       :config (load-theme 'dracula t)
       )
   #+end_src
** Fira Ligatures
   #+begin_src elisp
     (use-package fira-code-mode
       :straight t
       :defer t
       :hook (prog-mode . fira-code-mode))
   #+end_src

** Telephone line
   #+begin_src elisp
     (use-package telephone-line
       :straight t
       :hook (after-init . telephone-line-mode))
   #+end_src
** Dashboard
   #+begin_src elisp
     (use-package all-the-icons
       :straight t)
     (use-package dashboard
       :straight t
       :config
       (setq dashboard-banner-logo-title "Semimacs")
       (setq dashboard-center-content t)
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       ;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
       (dashboard-setup-startup-hook))
   #+end_src

* Editing
** Aggressive Indent
   #+begin_src elisp
     (use-package aggressive-indent
       :straight t
       :hook (prog-mode . aggressive-indent-mode)
       )
   #+end_src
** Basic
   Highlight matching parentheses
   #+begin_src elisp
	 (show-paren-mode 1)
   #+end_src elisp

Relative line numbers
   #+begin_src elisp
     (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers 'relative)))
   #+end_src
** undo-fu
   #+begin_src elisp
     (use-package undo-fu
       :straight t
       :bind (("C-/" . undo-fu-only-undo)
	      ("M-/" . undo-fu-only-redo)))
   #+end_src

** Electric Pairs
   #+begin_src elisp
     (electric-pair-mode)
   #+end_src
** paredit
   #+begin_src elisp
     (use-package paredit
       :straight t
       :hook (lisp-mode . paredit-mode))
   #+end_src
** Rainbow Delimiters
   #+begin_src elisp
     (use-package rainbow-delimiters
       :straight t
       :hook (lisp-mode . rainbow-delimiters-mode))
   #+end_src
** god-mode
   #+begin_src elisp
     (use-package god-mode
       :straight t
       :config
       (god-mode)
       (global-set-key (kbd "C-x C-1") #'delete-other-windows)
       (global-set-key (kbd "C-x C-2") #'split-window-below)
       (global-set-key (kbd "C-x C-3") #'split-window-right)
       (global-set-key (kbd "C-x C-0") #'delete-window)
       (global-set-key (kbd "C-x C-o") #'other-window)

       (defun my-god-mode-update-mode-line ()
	 (cond
	  (god-local-mode
	   (set-face-attribute 'mode-line nil
			       :foreground "#604000"
			       :background "#fff29a")
	   (set-face-attribute 'mode-line-inactive nil
			       :foreground "#3f3000"
			       :background "#fff3da"))
	  (t
	   (set-face-attribute 'mode-line nil
			       :foreground "#0a0a0a"
			       :background "#d7d7d7")
	   (set-face-attribute 'mode-line-inactive nil
			       :foreground "#404148"
			       :background "#efefef"))))


       (defun my-god-mode-update-cursor-type ()
	 (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

       (add-hook 'post-command-hook #'my-god-mode-update-cursor-type)
       (add-hook 'post-command-hook 'my-god-mode-update-mode-line)
       :bind (("<escape>" . god-local-mode)))
   #+end_src

** Move Text
   #+begin_src elisp
     (use-package move-text
       :straight t
       :bind (("M-p" . move-text-up)
	      ("M-n" . move-text-down)))

   #+end_src
** Yasnippet
   #+begin_src elisp
     (use-package yasnippet
       :straight t
       :config (yas-global-mode 1))
   #+end_src
** QOL
   #+begin_src elisp
     (setq next-line-add-newlines t)
   #+end_src 
** Langtool
   #+begin_src elisp
     (use-package popup
       :straight t)
     (use-package langtool
       :straight t
       :config
       (setq langtool-language-tool-jar "/home/semi/dl/LanguageTool-5.7-stable/languagetool-commandline.jar")
       (defun langtool-autoshow-detail-popup (overlays)
	   ;; Do not interrupt current popup
	   (unless (or popup-instances
		       ;; suppress popup after type `C-g` .
		       (memq last-command '(keyboard-quit)))
	     (let ((msg (langtool-details-error-message overlays)))
	       (popup-tip msg))))
       (setq langtool-autoshow-message-function
	     'langtool-autoshow-detail-popup))
   #+end_src 

* Functionality
** Counsel
   #+begin_src elisp
     (use-package consult
       :straight t
       :bind (("C-x b" . consult-buffer)
	      ("C-x p b" . consult-project-buffer)
	      ("C-x i" . consult-imenu)
	      ("C-x p i" . consult-imenu-multi)))
   #+end_src

** EMMS
   #+begin_src elisp
     (use-package emms
       :straight t
       :config
       (emms-all)
       (emms-default-players)
       (setq emms-source-file-default-directory "~/music/"))
   #+end_src

** Eshell
   #+begin_src elisp
     (add-hook 'eshell-mode-hook '(lambda ()
				    (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)))
   #+end_src

** elfeed
   #+begin_src elisp
     (use-package elfeed
       :straight t)
     (use-package elfeed-org
       :straight t
       :config
       (elfeed-org)
       (setq rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org")))
   #+end_src

** Vertico
   #+begin_src elisp
     (use-package vertico
       :straight t
       :config
       (setq read-extended-command-predicate
	     #'command-completion-default-include-p)
       (vertico-mode 1))

     (use-package orderless
       :straight t
       :init
       (setq completion-styles '(orderless)
	     completion-category-defaults nil
	     completion-category-overrides '((file (styles partial-completion)))))

     (use-package savehist
       :init
       (savehist-mode))
   #+end_src
** Notmuch
   #+begin_src elisp
     (use-package notmuch
       :straight t)
   #+end_src

** Magit
   #+begin_src elisp
	       (use-package magit
		 :straight t
		 :defer t
		 :bind ("C-x g" . magit-status))
   #+end_src 
** Marginalia
   #+begin_src elisp
     (use-package marginalia
       :straight t
       :init (marginalia-mode))
   #+end_src
** Diff-HL
   #+begin_src elisp
     (use-package diff-hl
       :straight t
       :hook (prog-mode . diff-hl-mode))
   #+end_src
** Which-Key
   #+begin_src elisp
     (use-package which-key
       :straight t
       :config
       (setq which-key-idle-delay 0.5)
       (which-key-mode))
   #+end_src

* Org
#+begin_src elisp
	(use-package org
		:straight t)
#+end_src
** Agenda
   #+begin_src elisp
     (global-set-key (kbd "C-c a") 'org-agenda)
   #+end_src
** Capture Templates
   #+begin_src elisp
      (setq org-capture-templates
       '(("t" "Todo" entry (file+headline "~/org/essential/inbox.org" "Tasks")
	  "* TODO %?\nSCHEDULED: %t\n%i")
	 ("n" "Note" entry (file+datetree "~/org/essential/notes.org")
	  "* %?" :prepend t)
	 ("j" "Journal" entry (file+datetree "~/org/journal.org")
	  "* %?" :prepend t)))
   #+end_src

   #+begin_src elisp
     (global-set-key (kbd "C-c c") 'org-capture)
   #+end_src

** Noter
   #+begin_src elisp
     (use-package org-noter
       :straight t)
   #+end_src
** Journal
   #+begin_src elisp
     (use-package org-journal
       :straight t
       :ensure t
       :defer t
       :config
       (setq org-journal-dir "~/org/journal"))
   #+end_src 
** Roam
   #+begin_src elisp
     (use-package org-roam
       :ensure t
       :straight t
       :init
       (setq org-roam-v2-ack t)
       :custom
       (org-roam-directory (file-truename "~/org/roam"))
       :config
       (setq org-roam-capture-templates
	     '(("m" "main" plain
		"%?"
		:if-new (file+head "main/${slug}.org"
				   "#+title: ${title}\n")
		:immediate-finish t
		:unnarrowed t)
	       ("r" "reference" plain
		"%?"
		:if-new (file+head "reference/${title}.org"
				   "#+title: ${title}\n")
		:immediate-finish t
		:unnarrowed t)
	       ("a" "articles" plain
		"%?"
		:if-new (file+head "articles/${title}.org"
				   "#+title: ${title}\n#+filetags: :article:\n")
		:immediate-finish t
		:unnarrowed t)))

       (cl-defmethod org-roam-node-type ((node org-roam-node))
	 "Return the TYPE of NODE."
	 (condition-case nil
	     (file-name-nondirectory
	      (directory-file-name
	       (file-name-directory
		(file-relative-name (org-roam-node-file node) org-roam-directory))))
	   (error "")))

       (setq org-roam-node-display-template
	     (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
       (org-roam-db-autosync-mode)
       (require 'org-roam-protocol)
       :bind (("C-c r f" . org-roam-node-find)
	      ("C-c r i" . org-roam-node-insert)
	      ("C-c r c" . org-roam-capture)
	      ("C-c r u" . org-roam-ui-open)
	      ("C-c r b" . org-roam-buffer-toggle)))
   #+end_src 

   #+RESULTS:
   : org-roam-buffer-toggle

** Roam-ui
   #+begin_src elisp
     (use-package org-roam-ui
       :straight
       (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
       :after org-roam
       :config
       (setq org-roam-ui-sync-theme t
	     org-roam-ui-follow t
	     org-roam-ui-update-on-save t
	     org-roam-ui-open-on-start t))
   #+end_src
** Recur
   #+begin_src elisp
     (use-package org-recur
       :demand t
       :straight t
       :hook ((org-mode . org-recur-mode)
	      (org-agenda-mode . org-recur-agenda-mode))
       :config
       (define-key org-recur-mode-map (kbd "C-c d") 'org-recur-finish)
     
       (define-key org-recur-agenda-mode-map (kbd "d") 'org-recur-finish)
       (define-key org-recur-agenda-mode-map (kbd "C-c d") 'org-recur-finish)
     
       (setq org-recur-finish-done t
	     org-recur-finish-archive t))
     
   #+end_src
** Present
   #+begin_src elisp
     (use-package org-present
       :straight t
       :hook
       ((org-present-mode . (lambda ()
			      (org-present-big)
			      (org-display-inline-images)
			      (org-present-hide-cursor)
			      (org-present-read-only)))
	(org-present-mode-quit . (lambda ()
			      (org-present-small)
			      (org-remove-inline-images)
			      (org-present-show-cursor)
			      (org-present-read-write)))))
   #+end_src

** Superstar
   #+begin_src elisp
     (use-package org-superstar
       :straight t
       :hook (org-mode . org-superstar-mode))
   #+end_src
** Small settings
   #+begin_src elisp
     ;(set-variable org-log-done 'time)
     (add-hook 'org-mode-hook 'auto-fill-mode)
   #+end_src

** Indentation
   #+begin_src elisp
     (setq org-adapt-indentation 't)
   #+end_src
* Programming
** Company
   #+begin_src elisp
     (use-package company
       :straight t
       :hook ((prog-mode . company-mode)
	      (eshell-mode . company-mode))
       :config (setq company-idle-delay 0))
   #+end_src
** Language Modes
*** C
    #+begin_src elisp
      (use-package ccls
	:straight t
	:config
	(setq ccls-executable "/bin/ccls")
	)
    #+end_src

*** Clojure
    #+begin_src elisp
      (use-package clojure-mode
	:straight t
	:defer t
	:mode "\\.clj\\'")

      (use-package cider
	:straight t)
    #+end_src
*** Common Lisp
**** Sly
     #+begin_src elisp
       (use-package sly
	 :straight t
	 :init
	 (setq inferior-lisp-program "/bin/sbcl"))
     #+end_src

*** Go
    #+begin_src elisp
      (use-package go-mode
	:straight t
	:defer t
	:mode "\\.go\\'")
    #+end_src
*** Haskell
    #+begin_src elisp
      (use-package haskell-mode
	:straight t
	:defer t
	:mode "\\.hs\\'")
    #+end_src
*** Julia
    #+begin_src elisp
      (use-package julia-mode
	:straight t
	:defer t
	:mode "\\.jl\\'")
    #+end_src

*** Nim
    #+begin_src elisp
      (use-package nim-mode
	:straight t
	:defer t
	:mode "\\.nim\\'")
    #+end_src
    
*** Python
    #+begin_src elisp
      (use-package python
	:straight t
	:defer t
	:mode ("\\.py\\'" . python-mode))
    #+end_src

*** Rust
    #+begin_src elisp
      (use-package rust-mode
	:ensure
	:straight t
	:config
	;(setq rustic-format-on-save t)
	:defer t
	:mode ("\\.rs\\'" . rust-mode))
    #+end_src

*** Zig
    #+begin_src elisp
      (use-package zig-mode
	:straight t
	:defer t
	:mode "\\.zig\\'")
    #+end_src 

** LSP
   #+begin_src elisp
   	:eval no
     (use-package lsp-mode
       :straight t
       :hook ((go-mode . lsp)
	      (nim-mode . lsp))
       :custom
       (lsp-eldoc-hook nil)
       (lsp-idle-delay 0.6)
       :commands lsp)
   #+end_src

** eglot
   #+begin_src elisp
     :eval no
     (use-package eglot
       :ensure
       :straight t)
   #+end_src
